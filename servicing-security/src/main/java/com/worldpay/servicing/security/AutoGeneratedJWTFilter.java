package com.worldpay.servicing.security;

import com.worldpay.servicing.common.logging.LoggingMarker;
import com.worldpay.sop.aip.authorization.spring.security.authentication.JwtAuthentication;
import com.worldpay.sop.aip.exception.BusinessException;
import com.worldpay.tpg.logging.TpgLogger;
import com.worldpay.tpg.logging.TpgLoggerFactory;

import org.springframework.context.annotation.Profile;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@Profile("dev")
final class AutoGeneratedJWTFilter extends OncePerRequestFilter {

  private static final TpgLogger LOGGER = TpgLoggerFactory.getTpgLogger(AutoGeneratedJWTFilter.class);

  private static final String CORR_ID = "c7751455-4b5a-45aa-a3f5-ba6c852c4d85";

  private static final String JWT =
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imp3dGtleSJ9.eyJzdWIiOiJwdXRVc2VyUGFzcyIsInZlciI6IjIuMCIsImRvbSI6InNkcyIsInByZHMiOiJGMjY1MjJFRiIsImlzcyI6IjEyNy4wLjAuMSIsInN0eXAiOjAsImxsdCI6MTUzOTg2OTc0NCwicmxzIjoiRkZGRjBFM0VCRUVBMTg3MzA5NUE3Q0NEMTNBOTBGQTI5RjBFM0VCRUVBMTg3MzA5NUE3Q0NEMTNBOTBGRkZGRiIsImFzbCI6MSwic2lwIjoiMTkyLjE2OC4wLjEiLCJ1YWgiOiJ7XCJ1YVwiOntcImZcIjpcIkFwYWNoZS1IdHRwQ2xpZW50XCIsXCJ2XCI6XCI0LjFcIn0sXCJvc1wiOntcImZcIjpcIk5BXCJ9LFwiZGV2XCI6e1wiZlwiOlwiTkFcIn19IiwiaWF0IjoxNTcwNTQxNjk3LCJyZXEiOiJjNzc1MTQ1NS00YjVhLTQ1YWEtYTNmNS1iYTZjODUyYzRkODUifQ.Fy1P1xUS1QmaCrseq-fnie2KppnAB2orJf4NfDr3-FUNiJIdxVj0ijJLry5hY3gSCoTAOIY0u8P8f4hJCBbprKlqGV6gSebuFjQJ2Q8jBwLkOJ3FPHbtQQdAjZ8D81krocZqIn0PDOPe4dPqqJ41RPmh8AQi0sREmF9Qcgulam5WUgegt0Wv6C5RGpTuc1px75KRRmSZqc_3X0j7fdfQZuOXsckD19ZOGLyhmXGYa5YDaKm2INCNtfZ__gjA6CYmXz-sjDNW9F11nRyl4esTbDacRGnNNSCg5Lpd4DMeu9MSNUmegb_XdTM4zwKKxptn8Fs1FJ90wm_xl2JT5YLhYQ";

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain) throws ServletException, IOException {
    try {
      final SecurityContext context = SecurityContextHolder.getContext();
      if (context.getAuthentication() == null) {
        context.setAuthentication(new JwtAuthentication(JWT, CORR_ID, null));
      }
    } catch (BusinessException e) {
      LOGGER.error(LoggingMarker.JWT_SECURITY_ERROR, "Error while setting dummy JWT authentication", e);
    }
    chain.doFilter(request, response);
  }
}
