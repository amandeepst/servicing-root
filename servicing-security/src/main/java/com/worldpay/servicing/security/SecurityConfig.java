package com.worldpay.servicing.security;

import com.worldpay.servicing.common.logging.LoggingMarker;
import com.worldpay.servicing.security.keystore.JwtIssuerKeyLoader;
import com.worldpay.sop.aip.authorization.spring.security.authentication.JwtAuthenticationFilter;
import com.worldpay.sop.aip.authorization.spring.security.conf.JwtMethodSecurityConfig;
import com.worldpay.sop.aip.authorization.spring.security.conf.JwtWebSecurityConfig;
import com.worldpay.sop.aip.jwt.utils.JwtIssuerKey;
import com.worldpay.tpg.logging.TpgLogger;
import com.worldpay.tpg.logging.TpgLoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.core.env.Environment;
import org.springframework.core.env.Profiles;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

import java.util.Set;

@Configuration
@EnableWebSecurity
@ComponentScan({"com.worldpay.servicing.security.keystore"})
@Import(JwtMethodSecurityConfig.class)
public class SecurityConfig extends JwtWebSecurityConfig {

  private static final String DEV_PROFILE = "dev";

  private static final String APPLICATION_AUTO_AUTHENTICATION = "application.auto.authentication";

  private static final TpgLogger LOGGER = TpgLoggerFactory.getTpgLogger(SecurityConfig.class);

  @Autowired
  private Environment env;

  @Autowired
  private JwtIssuerKeyLoader keyLoader;

  @Override
  protected void configure(HttpSecurity httpSecurity) throws Exception {
    super.configure(httpSecurity);
    if (useAutoGeneratedJWT()) {
      LOGGER.warn(LoggingMarker.JWT_SECURITY_WARN,
          "Using auto-generated JWT tokens. This mechanism should not be used on PROD environments.");
      addAutoGeneratedJWTFilter(httpSecurity);
    }
  }

  @Override
  protected Set<JwtIssuerKey> getPublicIssuerKeys() {
    return keyLoader.loadKeys();
  }

  @Override
  public void configure(WebSecurity web) {
    //ignore security when accessing the perf monitoring console
    web.ignoring().antMatchers("/javasimon/**")
        //ignore security when accessing application health endpoints
        .and().ignoring().antMatchers("/actuator/health/**")
        // ignore pci calls
        .and().ignoring().antMatchers("/pci/adhoc-charges/**")
        //ignore security for SOAP endpoints since these reqs are authorized based on in-message credentials
        .and().ignoring().antMatchers("/ws/**");
  }

  private boolean useAutoGeneratedJWT() {
    return env.acceptsProfiles(Profiles.of(DEV_PROFILE))
        && Boolean.valueOf(env.getProperty(APPLICATION_AUTO_AUTHENTICATION));
  }

  private void addAutoGeneratedJWTFilter(HttpSecurity httpSecurity) {
    httpSecurity.addFilterBefore(new AutoGeneratedJWTFilter(), JwtAuthenticationFilter.class);
  }
}

